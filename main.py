import time
import requests
import telebot
from telebot import types
import datetime
import data


bot = telebot.TeleBot(data.TOKEN)


@bot.message_handler(commands=['start'])
def command_start(message):
    chat_id = message.from_user.id
    with open(data.get_res('–∫–∞—Ä—Ç–∏–Ω–∫–∞1'), 'rb') as f:
        bot.send_photo(chat_id, f.read())  # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –±–∞–Ω–µ—Ä–∞ —Ä–µ–∫–ª–∞–º—ã
    bot.send_message(chat_id, data.get_res('—Ä–µ–∫–ª–∞–º–∞1'))  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–ª–∞–º—ã
    bot.send_message(chat_id, data.get_list_of_schools())
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∫–æ–ª —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –ø—Ä–æ–µ–∫—Ç–µ
    msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞ (–¥–æ 6-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤):', reply_markup=cancel_key())
    bot.register_next_step_handler(msg, second_step)


def board():
    # –º–µ—Ç–æ–¥ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ 2-–æ–π —Ñ–æ—Ä–º–µ,
    # –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç —Å–≤–æ–µ id –¥–ª—è –º–µ—Ç–æ–¥–∞
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    first_button = types.KeyboardButton(text='üìÜ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
    second_button = types.KeyboardButton(text='üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º')
    markup.add(first_button, second_button)
    third_button = types.KeyboardButton(text='üìã–î–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
    fourth_button = types.KeyboardButton(text='üí¨–ö–ª–∞—Å—Å–Ω—ã–π —á–∞—Ç')
    markup.add(third_button, fourth_button)
    markup.add(types.KeyboardButton(text='üì∞–ê—Ñ–∏—à–∞, –Ω–æ–≤–æ—Å—Ç–∏'),
               types.KeyboardButton(text='üìñ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'))
    markup.add(types.KeyboardButton(text='üö™–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'),
               types.KeyboardButton(text='‚óÄÔ∏è–û—Ç–º–µ–Ω–∞'))
    return markup


def cancel_key():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    markup.add(types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞'))
    return markup


def second_step(message):
    chat_id = message.from_user.id
    if message.text.lower() == data.cancel_word:
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=cancel_key())
        return
    with open(data.get_res('–∫–∞—Ä—Ç–∏–Ω–∫–∞2'), 'rb') as f:
        bot.send_photo(chat_id, f.read())  # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –±–∞–Ω–µ—Ä–∞ —Ä–µ–∫–ª–∞–º—ã
    bot.send_message(chat_id, data.get_res('—Ä–µ–∫–ª–∞–º–∞2'))  # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–ª–∞–º—ã

    grade = data.get_grade(message.text)  # –ø–æ–ª—É—á–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ –¥–ª—è —Ñ–æ—Ä–º—ã
    if grade is None:   # –µ—Å–ª–∏ —à–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        msg = bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ'
                                        ' –µ—â—ë —Ä–∞–∑(–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–û—Ç–º–µ–Ω–∞*):', reply_markup=cancel_key())
        bot.register_next_step_handler(msg, second_step)
        return
    time.sleep(3)
    with open(grade[0][3], 'rb') as f:
        photo = f.read()  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥.
        bot.send_photo(chat_id, photo)
    name_of_day = data.trans(datetime.datetime.now().strftime("%A"), '\n'.join(grade[1]))
    name_of_day, timetable = name_of_day[:name_of_day.find('\n')], name_of_day[name_of_day.find('\n'):]
    bot.send_message(chat_id,
                     '–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:\n' + grade[0][4] +
                     f'\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {name_of_day} {datetime.datetime.now().strftime("%d.%m.%Y")}:' + timetable,
                     reply_markup=board())


def act_on_stud(stud_id):   # —Ä–∞–±–æ—Ç–∞ —Å —É—á–µ–Ω–∏–∫–æ–º –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    markup = types.InlineKeyboardMarkup()
    stud_id = stud_id[:stud_id.find('sx')]
    markup.add(types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=stud_id + 'del'))
    markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥', callback_data=stud_id + 'edit'))
    return markup


@bot.callback_query_handler(func=lambda message: True)
def callback(obj):
    chat_id = obj.from_user.id

    if obj.data == 'dz':  # –≤—ã–±–æ—Ä –¥–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:')
        bot.register_next_step_handler(msg, change_homework)

    elif obj.data == 'ro':  # –≤—ã–±–æ—Ä –¥–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        teacher_edit(obj)

    elif obj.data == '—Å—à':  # —Å–º–µ–Ω–∞ –∫–æ–¥–∞ —à–∫–æ–ª—ã –ø—Ä–µ–ø–æ–¥–∞
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ —à–∫–æ–ª—ã (3 —Å–∏–º–≤–æ–ª–∞):')
        bot.register_next_step_handler(msg, change_school_teacher)

    elif obj.data == 'tid':  # —Å–º–µ–Ω–∞ –∞–π–¥–∏ –ø—Ä–µ–ø–æ–¥–∞
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ —É—á–∏—Ç–µ–ª—è (4 —Å–∏–º–≤–æ–ª–∞):')
        bot.register_next_step_handler(msg, change_teacher_id)

    elif obj.data == 'cp':  # —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–µ–ø–æ–¥–∞
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'
                                        ' —É—á–∏—Ç–µ–ª—è (–¥–æ 26 —Å–∏–º–≤–æ–ª–æ–≤):')
        bot.register_next_step_handler(msg, change_teacher_password)

    elif obj.data == 'sub':  # —Å–º–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É—á–∏—Ç–µ–ª—è:')
        bot.register_next_step_handler(msg, change_teacher_subj)

    elif obj.data == 'td':  # —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞
        data.delete_teacher()
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.')

    elif obj.data == '–Ω–∞–∑–≤—à–∫':
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã:')
        bot.register_next_step_handler(msg, edit_name_of_school)

    elif obj.data == '–Ω–æ–≤—ã–Ω—ã':
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –≤ —à–∫–æ–ª–µ:')
        bot.register_next_step_handler(msg, edit_news)

    elif obj.data == '–Ω–æ–º–∫–ª':
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:')
        bot.register_next_step_handler(msg, new_number)

    elif obj.data == '—Ñ–æ—Ç–∫–ª—Ä—É–∫':
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫.:')
        bot.register_next_step_handler(msg, photo_grade_teacher)

    elif obj.data == '–∏–º–∫–ª—Ä—É–∫':
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫.:')
        bot.register_next_step_handler(msg, set_grade_name_teacher2)

    elif obj.data == '–¥–æ—Å–∫–æ–±':
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:')
        bot.register_next_step_handler(msg, set_desk2)

    elif obj.data == '—É–¥–ª—à–∫':
        data.delete_school()
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.')

    elif obj.data == '—É–¥–∫–ª':
        data.delete_grade()
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.')

    elif obj.data.find('del') > -1:  # —É–¥–∞–ª–µ–Ω–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–∞
        data.delete_stud(obj.data[:obj.data.find('del')])
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.')

    elif obj.data.find('edit') > -1:   # –∏–∑–º–µ–Ω–µ–Ω–∏–µ id —à–∫–æ–ª—å–Ω–∏–∫–∞
        data.dict_of_data['last_stud_id'] = obj.data
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ —É—á–µ–Ω–∏–∫–∞ (3 —Å–∏–º–≤–æ–ª–∞):')
        bot.register_next_step_handler(msg, accept_id)

    elif obj.data.find('sx') > -1:
        # —Ä–∞–±–æ—Ç–∞ —Å —à–∫–æ–ª—å–Ω–∏–∫–æ–º, —É–¥–∞–ª–µ–Ω–∏–µ, –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ id
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ :', reply_markup=act_on_stud(obj.data))

    else:   # –∫–æ–¥ —É—á–∏—Ç–µ–ª—è, –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
        data.dict_of_data['last_stud_id'] = obj.data
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:')
        bot.register_next_step_handler(msg, accept)


def person_room(message):   # –∫–æ–º–Ω–∞—Ç–∞ —à–∫–æ–ª—å–Ω–∏–∫–∞
    chat_id = message.from_user.id
    if message.text.lower().find('–æ—Ç–º–µ–Ω–∞') > -1:
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        return
    marks = data.get_marks(data.dict_of_data.get('school_id') + data.dict_of_data.get('grade_id') + message.text)
    # –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –≤–µ—Ä–µ–Ω –≤—ã–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫–∏
    if marks is None:
        msg = bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –∏–ª–∏ —É —É—á–µ–Ω–∏–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫, '
                                                     '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤—ã—Ö–æ–¥–∞:')
        bot.register_next_step_handler(msg, person_room)
        return
    bot.send_message(chat_id, marks)   # –≤—ã–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫–∏


@bot.message_handler(commands=['room'])  # –∫–æ–º–Ω–∞—Ç–∞ –ø—Ä–µ–ø–æ–¥–æ–≤
def room_of_teacher(message):
    msg = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ 7 —Ü–∏—Ñ—Ä:', reply_markup=cancel_key())
    bot.register_next_step_handler(msg, pre_teacher_room)


def pre_teacher_room(message):
    if message.text.lower() == data.cancel_word:
        bot.send_message(message.from_user.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        return
    if data.check_teacher(message.text):
        # –µ—Å–ª–∏ –ø—Ä–µ–ø–æ–¥ –µ—Å—Ç—å –∏–¥–µ–º –¥–∞–ª—å—à–µ, –∏–Ω–∞—á–µ –≤—ã–∫–∏–¥—ã–≤–∞–µ–º
        msg = bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–û—Ç–º–µ–Ω–∞*:',
                               reply_markup=cancel_key())
        bot.register_next_step_handler(msg, pre_teacher_room)
        return
    msg = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', reply_markup=cancel_key())
    bot.register_next_step_handler(msg, teacher_room)


def grades(ls_of_grades):   # –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    for i in ls_of_grades:
        markup.add(types.KeyboardButton(text=i[0]))
    markup.add(types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞'))
    return markup


def teacher_room(message):
    chat_id = message.from_user.id
    if message.text.lower() == data.cancel_word:
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        return
    teacher = data.check_pass(message.text)
    if teacher is None:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–æ–ª—å
        msg = bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑,'
                                                     ' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–û—Ç–º–µ–Ω–∞*:', reply_markup=cancel_key())
        bot.register_next_step_handler(msg, teacher_room)
        return
    ls_of_grades = data.grades()   # –ø–æ–ª—É—á–∞–µ–º –∏–∑ id —É—á–∏—Ç–µ–ª—è –≤—Å–µ –∫–ª–∞—Å—Å—ã(—Ç.–∫. –µ—Å—Ç—å school_id)
    msg = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å:',
                           reply_markup=grades(ls_of_grades))
    bot.register_next_step_handler(msg, change_hw_or_marks)


def action():   # –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–ª–∞—Å—Å–∞
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data='dz'))
    markup.add(types.InlineKeyboardButton(text='–†–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫', callback_data='ro'))
    return markup


def change_hw_or_marks(message):
    chat_id = message.from_user.id
    if message.text.lower() == data.cancel_word:
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        return
    data.dict_of_data['grade'] = message.text
    if data.check_grade():
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –Ω–µ —Å—É—â–µ—Å–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≥–æ,'
                                        ' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–û—Ç–º–µ–Ω–∞*:')
        bot.register_next_step_handler(msg, change_hw_or_marks)
        return
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ',
                     reply_markup=action())


def change_homework(message):
    chat_id = message.from_user.id
    if message.text.lower() == data.cancel_word:
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        return
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∞ –∏–º–µ–Ω–Ω–æ –ª–æ–≥–∏–Ω, –∫–ª–∞—Å—Å, –¥–∑
    new_task = data.change_homework(message.text)
    bot.send_message(chat_id, '–ó–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ;\n–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: \n' + new_task)


def teacher_edit(message):
    chat_id = message.from_user.id
    try:    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—à–∏–±—Å—è –∏ –ø–µ—Ä–µ—Ö–æ—Ç–µ–ª –≤–≤–æ–¥–∏—Ç—å –∑–∞–Ω–æ–≥–æ
        message.data.lower()
    except AttributeError:
        if message.text.lower() == data.cancel_word:
            bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
            return
        msg = bot.send_message(chat_id, '–í –≤–µ–¥–µ–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å,'
                                        '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ *–û—Ç–º–µ–Ω–∞* –¥–ª—è –≤—ã—Ö–æ–¥–∞:')
        bot.register_next_step_handler(msg, teacher_edit)
        return

    if message.data.lower() == data.cancel_word:
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        return
    magazine = data.magazine()
    if len(magazine) == 0:
        msg = bot.send_message(chat_id, '–í –≤–µ–¥–µ–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å,'
                                        '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ *–û—Ç–º–µ–Ω–∞* –¥–ª—è –≤—ã—Ö–æ–¥–∞:')
        bot.register_next_step_handler(msg, teacher_edit)
        return
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö —Å–ø–∏—Å–∫–æ–º
    markup = types.InlineKeyboardMarkup()
    for i in magazine:
        markup.add(types.InlineKeyboardButton(text=i[i.find(':') + 1:], callback_data=i[:i.find(':')]))
    bot.send_message(chat_id, '–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ :', reply_markup=markup)


def accept(message):    # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏,
    chat_id = message.from_user.id
    if message.text.lower() == data.cancel_word:
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        return
    if data.set_mark(message.text):
        bot.send_message(chat_id, '–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')
    else:
        msg = bot.send_message(chat_id, '–û—Ü–µ–Ω–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤–≤–∏–¥–∏—Ç–µ —á–∏—Å–ª–æ:')
        bot.register_next_step_handler(msg, accept)


@bot.message_handler(commands=['admin'])    # –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
def admin(message):
    msg = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', reply_markup=cancel_key())
    bot.register_next_step_handler(msg, admin_room)


def choose():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    markup.add(types.KeyboardButton(text='–°–æ–∑–¥–∞—Ç—å'),
               types.KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'))
    return markup


def admin_room(message):
    chat_id = message.from_user.id  # –ó–ê–ß–ï–ú –ü–ê–†–û–õ–¨–¨–¨???
    if message.text.lower() == data.cancel_word:
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        return
    if message.text != data.dict_of_admins.get(chat_id) and message.text != '–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω. –º–µ–Ω—é':
        msg = bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ '
                                                     '–∑–∞–Ω–æ–≥–æ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É *–û—Ç–º–µ–Ω–∞*:')
        bot.register_next_step_handler(msg, admin_room)
        return
    # –µ—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ, —Ç–æ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å –æ–∫,
    # —Ç–æ —Ç—ã –≤ –∫–æ–º–Ω–∞—Ç–µ –∞–¥–º–∏–Ω–∞
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å:', reply_markup=choose())


def pre_change_banner_or_text(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.check_ad(message.text):
        if message.text.find('–∫–∞—Ä—Ç–∏–Ω–∫–∞') > -1:
            msg = bot.send_message(chat_id, '–ü–µ—Ä–µ—à–ª–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É:')
            bot.register_next_step_handler(msg, change_banner)
        else:
            msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:')
            bot.register_next_step_handler(msg, change_banner_or_text)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–æ–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ,\n–∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—â—ë —Ä–∞–∑:')
        bot.register_next_step_handler(msg, pre_change_banner_or_text)


def change_banner(message):  # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –±–∞–Ω–µ—Ä–∞
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    path = 'img\\' + data.dict_of_data.get('ad') + '.jpg'
    if message.json.get('document') is None:
        if message.json.get('photo') is None:
            msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:')
            bot.register_next_step_handler(msg, change_banner)
            return
        else:
            file_id = message.json.get('photo')[0].get('file_id')
            file_info = bot.get_file(file_id)
            with open(path, 'wb') as f:
                f.write(
                    requests.get(
                        'https://api.telegram.org/file/bot{0}/{1}'.format(data.TOKEN, file_info.file_path)).content)
    else:
        file_id = message.json.get('document').get('file_id')
        file_info = bot.get_file(file_id)
        with open(path, 'wb') as f:
            f.write(requests.get(
                'https://api.telegram.org/file/bot{0}/{1}'.format(data.TOKEN, file_info.file_path)).content)
    data.change_ad(path)
    bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')


def change_banner_or_text(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    data.change_ad(message.text)
    bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')


def days_tt():  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∫–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    markup.add(types.KeyboardButton(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'), types.KeyboardButton(text='–í—Ç–æ—Ä–Ω–∏–∫'))
    markup.add(types.KeyboardButton(text='–°—Ä–µ–¥–∞'), types.KeyboardButton(text='–ß–µ—Ç–≤–µ—Ä–≥'))
    markup.add(types.KeyboardButton(text='–ü—è—Ç–Ω–∏—Ü–∞'), types.KeyboardButton(text='–°—É–±–±–æ—Ç–∞'))
    markup.add(types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞'),
               types.KeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω. –º–µ–Ω—é'))
    return markup


def pre_change_tt(message):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–Ω—è –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ —Ä–∞–ø–∏—Å–∞–Ω–∏–µ–º
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.get_grade(message.text) is None:
        msg = bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≥–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥:')
        bot.register_next_step_handler(msg, pre_change_tt)
        return
    msg = bot.send_message(chat_id, '–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:',
                           reply_markup=days_tt())
    # –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∫—É –¥–Ω—è –¥–ª—è —Å–º–µ–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    bot.register_next_step_handler(msg, pre_change_tt2)


def pre_change_tt2(message):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    ls_of_days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞',
                  '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
    if message.text not in ls_of_days:
        msg = bot.send_message(chat_id, '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å.\n'
                                        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∑–∞–Ω–æ–≥–æ:',
                               reply_markup=days_tt())
        bot.register_next_step_handler(msg, pre_change_tt2)
        return
    msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ '
                                    '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Å–∏–º–≤–æ–ª-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - ;)\n–ü—Ä–∏–º–µ—Ä:\n–í—ã –≤–≤–æ–¥–∏—Ç–µ: '
                                    '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫;–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ;\n'
                                    '–í—ã–≤–µ–ª–æ—Å—å:\n–†—É—Å—Å–∫–∏–π —è–∑—ã–∫\n–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:')
    # –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —Å–∏–º–≤–æ–ª —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —ç—Ç–æ –¥–ª—è
    # —Å–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–µ—Ç–∫–∏ –Ω–∞ –Ω–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫—É
    bot.register_next_step_handler(msg, change_tt)


def change_tt(message):  # —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Å–º–µ–Ω—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    temp_message = bot.forward_message(chat_id, chat_id, message.message_id - 2)
    day = temp_message.text
    bot.delete_message(chat_id, temp_message.message_id)
    data.set_tt(message.text, day)
    # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    msg = bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
                                    ' –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞–ø–∏—Å–∞–Ω–∏–µ.')
    bot.register_next_step_handler(msg, pre_change_tt2)


def studs(ls_of_stud):  # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    markup = types.InlineKeyboardMarkup()
    for i in ls_of_stud:
        markup.add(types.InlineKeyboardButton(text=i[:i.find(':')], callback_data=i[i.find(':') + 1:] + 'sx'))
    return markup


def pre_change_list_of_child(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    ls_of_stud = data.check_stud(message.text)
    if ls_of_stud is None:
        msg = bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –∏–ª–∏ –≤ –∫–ª–∞—Å—Å–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤,'
                                        ' –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ù–∞–∑–∞–¥*:')
        bot.register_next_step_handler(msg, pre_change_list_of_child)
        return
    bot.send_message(chat_id, '–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤, –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è :',
                     reply_markup=studs(ls_of_stud))


def accept_id(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.change_id(message.text):
        bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n'
                                  f'ID —É—á–µ–Ω–∏–∫–∞ - {message.text}.')
    else:
        msg = bot.send_message(chat_id, '–í—ã–±—Ä–∞–Ω–Ω—ã–π ID –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π, '
                                        '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ù–∞–∑–∞–¥*:')
        bot.register_next_step_handler(msg, accept_id)


def buttons_of_teacher():  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∫–∞ –¥–ª—è –∏–≥—Ä—ã —Å —É—á–∏—Ç–µ–ª–µ–º
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å —à–∫–æ–ª—É', callback_data='—Å—à'),
               types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å id', callback_data='tid'))
    markup.add(types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', callback_data='cp'),
               types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç', callback_data='sub'))
    markup.add(types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='td'))
    return markup


def change_id_teacher(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    try:
        info = data.check_teacher_id(message.text)[0]
    except:
        msg = bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:')
        bot.register_next_step_handler(msg, change_id_teacher)
    else:
        data.dict_of_data['login'] = message.text   # –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã –æ —É—á–∏—Ç–µ–ª–µ
        info = list(info)
        info[0] = '–ö–æ–¥ —à–∫–æ–ª—ã: ' + info[0]
        info[1] = '–ö–æ–¥ —É—á–∏—Ç–µ–ª—è: ' + info[1]
        info[2] = '–ü–∞—Ä–æ–ª—å —É—á–∏—Ç–µ–ª—è: ' + info[2]
        info[3] = '–ü—Ä–µ–¥–º–µ—Ç —É—á–∏—Ç–µ–ª—è: ' + info[3]
        info[4] = '–ë–∞–ª–ª—ã —É—á–∏—Ç–µ–ª—è: ' + info[4]
        bot.send_message(chat_id, '–î–∞–Ω–Ω—ã–µ —É—á–∏—Ç–µ–ª—è :\n' + '\n'.join(info),
                         reply_markup=buttons_of_teacher())


# –¥–∞–ª–µ–µ –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—è


def change_school_teacher(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.new_teacher_schoold_id(message.text):
        bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ–≤—ã–π ID —à–∫–æ–ª—ã —É—á–∏—Ç–µ–ª—è - {message.text}.')
    else:
        msg = bot.send_message(chat_id, '–í—ã–±—Ä–∞–Ω–Ω—ã–π ID –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑,'
                                        ' –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *–ù–∞–∑–∞–¥* –¥–ª—è –≤—ã—Ö–æ–¥–∞')
        bot.register_next_step_handler(msg, change_school_teacher)


def change_teacher_id(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.new_teacher_id(message.text):
        bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ–≤—ã–π —É—á–∏—Ç–µ–ª—å—Å–∫–∏–π ID - {message.text}')
    else:
        msg = bot.send_message(chat_id, '–í—ã–±—Ä–∞–Ω–Ω—ã–π ID –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑,'
                                        ' –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *–ù–∞–∑–∞–¥* –¥–ª—è –≤—ã—Ö–æ–¥–∞')
        bot.register_next_step_handler(msg, change_teacher_id)


def change_teacher_password(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.new_teacher_password(message.text):
        bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å - {message.text}.')
    else:
        msg = bot.send_message(chat_id, '–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏–º, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:')
        bot.register_next_step_handler(msg, change_teacher_password)


def change_teacher_subj(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.new_teacher_subj(message.text):
        bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç - {message.text}.')
    else:
        msg = bot.send_message(chat_id, '–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–µ—Ç –¥—Ä—É–≥–æ–π —É—á–∏—Ç–µ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:')
        bot.register_next_step_handler(msg, change_teacher_subj)


def create_school(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.create_school(message.text):
        msg = bot.send_message(chat_id, '–®–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —à–∫–æ–ª—ã:')
        bot.register_next_step_handler(msg, new_title_of_school)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω—ã–π ID –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:')
        bot.register_next_step_handler(msg, create_school)


def new_title_of_school(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.set_title_of_school(message.text):
        msg = bot.send_message(chat_id, f'–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã - {message.text} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ,'
                                        f' –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ —à–∫–æ–ª—ã, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ -1:')
        bot.register_next_step_handler(msg, new_afisha_of_school)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ:')
        bot.register_next_step_handler(msg, new_title_of_school)


def new_afisha_of_school(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.set_new_afisha(message.text):
        bot.send_message(chat_id, '–®–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–∞.')
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:')
        bot.register_next_step_handler(msg, new_afisha_of_school)


def create_grade(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.check_school(message.text):  # –ø—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —à–∫–æ–ª–∞
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∞—Å—Å–∞(–¥–æ 3-—ë—Ö —Å–∏–º–≤–æ–ª–æ–≤, '
                                        '–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —à–∏—Ñ—Ä - –≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è + –±—É–∫–≤–∞,'
                                        '–ø—Ä–∏–º–µ—Ä 19–± –∏–ª–∏ –∂–µ –±–µ–∑ –±—É–∫–≤—ã, 190):')
        bot.register_next_step_handler(msg, new_grade)
    else:
        msg = bot.send_message(chat_id, '–®–∫–æ–ª–∞ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:')
        bot.register_next_step_handler(msg, create_grade)


def new_grade(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.create_grade(message.text):
        msg = bot.send_message(chat_id, '–ö–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (5–±):')
        bot.register_next_step_handler(msg, set_number)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω—ã–π ID –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:')
        bot.register_next_step_handler(msg, new_grade)


def set_number(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.set_number(message.text):
        msg = bot.send_message(chat_id, f'–ù–æ–º–µ—Ä - {message.text} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, '
                                        f'–ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:')
        bot.register_next_step_handler(msg, set_photo)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:')
        bot.register_next_step_handler(msg, set_number)


def set_photo(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return

    school_id, grade_id = data.dict_of_data.get('school_id'), data.dict_of_data.get('grade_id')
    path = 'img\\' + school_id + grade_id + '.png'
    if message.json.get('document') is None:
        if message.json.get('photo') is None:
            msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:')
            bot.register_next_step_handler(msg, set_photo)
            return
        else:
            file_id = message.json.get('photo')[0].get('file_id')
            file_info = bot.get_file(file_id)
            with open(path, 'wb') as f:
                f.write(
                    requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(data.TOKEN, file_info.file_path)).content)
    else:
        file_id = message.json.get('document').get('file_id')
        file_info = bot.get_file(file_id)
        with open(path, 'wb') as f:
            f.write(requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(data.TOKEN, file_info.file_path)).content)

    if data.set_photo(path):
        msg = bot.send_message(chat_id, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:')
        bot.register_next_step_handler(msg, set_grade_name_teacher)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:')
        bot.register_next_step_handler(msg, set_photo)


def set_grade_name_teacher(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.set_grade_name_teacher(message.text):
        msg = bot.send_message(chat_id, f'–ò–º—è –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, –∞ –∏–º–µ–Ω–Ω–æ - {message.text} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ,'
                                        ' –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –±–µ—Å–µ–¥—ã (–µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ -1):')
        bot.register_next_step_handler(msg, set_code)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–æ–µ –∏–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ:')
        bot.register_next_step_handler(msg, set_grade_name_teacher)


def set_code(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.set_code(message.text):
        msg = bot.send_message(chat_id, '–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç '
                                        '–¥–æ—Å–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ -1):')
        bot.register_next_step_handler(msg, set_desk)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–ª–∏ -1:')
        bot.register_next_step_handler(msg, set_code)


def set_desk(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.set_desk(message.text):
        bot.send_message(chat_id, '–ö–ª–∞—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:')
        bot.register_next_step_handler(msg, set_desk)


def pre_create_stud(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.get_grade(message.text) is not None:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞:')
        bot.register_next_step_handler(msg, create_stud)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≥–æ:')
        bot.register_next_step_handler(msg, pre_create_stud)


def create_stud(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.create_stud(message.text):
        msg = bot.send_message(chat_id, f'–ò–º—è - {message.text} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞:')
        bot.register_next_step_handler(msg, set_stud_id)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ:')
        bot.register_next_step_handler(msg, create_stud)


def set_stud_id(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.set_stud_id(message.text):
        bot.send_message(chat_id, '–ù–æ–≤—ã–π —É—á–µ–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω.')
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω—ã–π ID –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:')
        bot.register_next_step_handler(msg, set_stud_id)


def pre_create_teach(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.get_school(message.text):
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID:')
        bot.register_next_step_handler(msg, create_teach)
    else:
        msg = bot.send_message(chat_id, '–®–∫–æ–ª—ã —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑:')
        bot.register_next_step_handler(msg, pre_create_teach)


def create_teach(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.create_teach(message.text):
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —É—á–∏—Ç–µ–ª—è:')
        bot.register_next_step_handler(msg, create_teacher_password)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω—ã–π ID –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
        bot.register_next_step_handler(msg, create_teach)


def create_teacher_password(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.new_teacher_password(message.text):
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —É—á–∏—Ç–µ–ª—è:')
        bot.register_next_step_handler(msg, create_teacher_subj)
    else:
        msg = bot.send_message(chat_id, '–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏–º, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:')
        bot.register_next_step_handler(msg, create_teacher_password)


def create_teacher_subj(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.new_teacher_subj(message.text):
        bot.send_message(chat_id, '–£—á–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.')
    else:
        msg = bot.send_message(chat_id, '–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–∞–Ω–Ω–æ–º—É —É—á–∏—Ç–µ–ª—é, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:')
        bot.register_next_step_handler(msg, create_teacher_subj)


def edit_school():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã', callback_data='–Ω–∞–∑–≤—à–∫'))
    markup.add(types.InlineKeyboardButton(text='–ù–æ–≤–æ—Å—Ç–∏ —à–∫–æ–ª—ã', callback_data='–Ω–æ–≤—ã–Ω—ã'))
    markup.add(types.InlineKeyboardButton(text='–£–¥–∞–ª–µ–Ω–∏–µ —à–∫–æ–ª—ã', callback_data='—É–¥–ª—à–∫'))
    return markup


def pre_edit_school(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.get_school(message.text):
        bot.send_message(chat_id, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:', reply_markup=edit_school())
    else:
        msg = bot.send_message(chat_id, '–®–∫–æ–ª—ã —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ id:')
        bot.register_next_step_handler(msg, pre_edit_school)


def edit_name_of_school(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.set_name_of_school(message.text):
        bot.send_message(chat_id, '–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã:')
        bot.register_next_step_handler(msg, edit_name_of_school)


def edit_news(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.set_news(message.text):
        bot.send_message(chat_id, '–ù–æ–≤–æ—Å—Ç–∏ —à–∫–æ–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')
    else:
        msg = bot.send_message(chat_id, '–ù–æ–≤–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≥–æ:')
        bot.register_next_step_handler(msg, edit_news)


def grade_butt():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', callback_data='–Ω–æ–º–∫–ª'))
    markup.add(types.InlineKeyboardButton(text='–§–æ—Ç–æ –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è', callback_data='—Ñ–æ—Ç–∫–ª—Ä—É–∫'))
    markup.add(types.InlineKeyboardButton(text='–ò–º—è –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è', callback_data='–∏–º–∫–ª—Ä—É–∫'))
    markup.add(types.InlineKeyboardButton(text='–î–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π', callback_data='–¥–æ—Å–∫–æ–±'))
    markup.add(types.InlineKeyboardButton(text='–£–¥–∞–ª–µ–Ω–∏–µ', callback_data='—É–¥–∫–ª'))
    return markup


def edit_grade(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.get_grade(message.text) is not None:
        bot.send_message(chat_id, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:', reply_markup=grade_butt())
    else:
        msg = bot.send_message(chat_id, '–ö–ª–∞—Å—Å–∞ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ ID –∑–∞–Ω–æ–≥–æ:')
        bot.register_next_step_handler(msg, edit_grade)


def new_number(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.set_number(message.text):
        bot.send_message(chat_id, '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
    else:
        msg = bot.send_message(chat_id, '–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:')
        bot.register_next_step_handler(msg, new_number)


def photo_grade_teacher(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return

    school_id, grade_id = data.dict_of_data.get('school_id'), data.dict_of_data.get('grade_id')
    path = 'img\\' + school_id + grade_id + '.png'
    if message.json.get('document') is None:
        if message.json.get('photo') is None:
            msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:')
            bot.register_next_step_handler(msg, photo_grade_teacher)
            return
        else:
            file_id = message.json.get('photo')[0].get('file_id')
            file_info = bot.get_file(file_id)
            with open(path, 'wb') as f:
                f.write(
                    requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(data.TOKEN, file_info.file_path)).content)
    else:
        file_id = message.json.get('document').get('file_id')
        file_info = bot.get_file(file_id)
        with open(path, 'wb') as f:
            f.write(requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(data.TOKEN, file_info.file_path)).content)

    if data.set_photo(path):
        bot.send_message(chat_id, '–§–æ—Ç–æ –∫–ª–∞—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:')
        bot.register_next_step_handler(msg, photo_grade_teacher)


def set_grade_name_teacher2(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.set_grade_name_teacher(message.text):
        msg = bot.send_message(chat_id, '–ò–º—è –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫. —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ.')
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–æ–µ –∏–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ:')
        bot.register_next_step_handler(msg, set_grade_name_teacher2)


def set_desk2(message):
    chat_id = message.from_user.id
    if message.text == data.back_word:
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å:', reply_markup=choose())
        return
    if data.set_desk(message.text):
        bot.send_message(chat_id, '–î–æ—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:')
        bot.register_next_step_handler(msg, set_desk)


def edit_admin():   # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text='–†–µ–∫–ª–∞–º–∞'))
    markup.add(types.KeyboardButton(text='–®–∫–æ–ª–∞'),
               types.KeyboardButton(text='–ö–ª–∞—Å—Å.'))
    markup.add(types.KeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'))
    markup.add(types.KeyboardButton(text='–£—á–µ–Ω–∏–∫–æ–≤'),
               types.KeyboardButton(text='–ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª–µ–π'))
    markup.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω. –º–µ–Ω—é'))
    return markup


def create_admin():   # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text='–®–∫–æ–ª—É'),
               types.KeyboardButton(text='–ö–ª–∞—Å—Å'))
    markup.add(types.KeyboardButton(text='–£—á–µ–Ω–∏–∫–∞'),
               types.KeyboardButton(text='–£—á–∏—Ç–µ–ª—è'))
    markup.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω. –º–µ–Ω—é'))
    return markup


def edit_baner(ls_of_buttons):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for i in ls_of_buttons:
        markup.add(types.KeyboardButton(text=i))
    markup.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω. –º–µ–Ω—é'))
    return markup


@bot.message_handler(content_types=['text'])
def text(message):
    chat_id = message.from_user.id
    if message.text.lower() == data.cancel_word:
        bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        return
    text = message.text
    if text == 'üìÜ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞':
        timetable = data.get_timetable_on_tomorrow()
        bot.send_message(chat_id, timetable)

    elif text == 'üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º':
        bot.send_message(chat_id, data.get_all_timetable())

    elif text == 'üìã–î–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π':
        bot.send_message(chat_id, data.get_desk())

    elif text == 'üí¨–ö–ª–∞—Å—Å–Ω—ã–π —á–∞—Ç':
        bot.send_message(chat_id, '–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–æ—à–µ–Ω–∏–µ:\n' + data.get_invite_url())
        return

    elif text == 'üì∞–ê—Ñ–∏—à–∞, –Ω–æ–≤–æ—Å—Ç–∏':
        bot.send_message(chat_id, data.get_afisha())

    elif text == 'üìñ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ':
        bot.send_message(chat_id, data.print_hw())

    elif text == 'üö™–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—á–µ–Ω–∏–∫–∞ (–¥–æ 3-—ë—Ö —Å–∏–º–≤–æ–ª–æ–≤):')
        bot.register_next_step_handler(msg, person_room)

    elif text == '–°–æ–∑–¥–∞—Ç—å':     # –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:', reply_markup=create_admin())

    elif text == '–®–∫–æ–ª—É':   # —Å–æ–∑–¥–∞–Ω–∏–µ —à–∫–æ–ª—ã
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–π —à–∫–æ–ª—ã (3 —Å–∏–º–≤–æ–ª–∞):')
        bot.register_next_step_handler(msg, create_school)

    elif text == '–ö–ª–∞—Å—Å':   # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
        bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∫–æ–ª—ã , –∏—Ö ID:\n' + data.get_list_of_schoold_for_admin())
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ ID —à–∫–æ–ª—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —ç—Ç–æ—Ç –∫–ª–∞—Å—Å (3 —Å–∏–º–≤–æ–ª–∞):')
        bot.register_next_step_handler(msg, create_grade)

    elif text == '–£—á–µ–Ω–∏–∫–∞':  # —Å–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
        bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∫–æ–ª—ã, –ù–∞–∑–≤–∞–Ω–∏–µ, ID –∫–ª–∞—Å—Å–∞:\n' + data.get_list_of_grades_for_admin())
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∞—Å—Å–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞:')
        bot.register_next_step_handler(msg, pre_create_stud)

    elif text == '–£—á–∏—Ç–µ–ª—è':  # —Å–æ–∑–¥–∞–Ω–∏–µ —É—á–∏—Ç–µ–ª—è
        bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∫–æ–ª—ã , –∏—Ö ID:\n' + data.get_list_of_schoold_for_admin())
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ ID —à–∫–æ–ª—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—è:')
        bot.register_next_step_handler(msg, pre_create_teach)

    elif text == '–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω. –º–µ–Ω—é':   # –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ–º–Ω–∞—Ç—É –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞—Ç—å –∏ —Ä–µ–¥–∞—á–∏—Ç—å
        admin_room(message)
        return

    elif text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å':
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, '
                                  '–≤—Å–µ –≤–æ–∑–º–æ–¥–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:',
                         reply_markup=edit_admin())

    # –î–ê–õ–ï–ï –ü–û–®–õ–û –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï

    elif text == '–†–µ–∫–ª–∞–º–∞':
        ls_of_data = data.get_ad()
        ls_of_buttons = []
        msg = ''
        for i in ls_of_data:
            if i[0].find('–∫–∞—Ä—Ç–∏–Ω–∫–∞') > -1:
                with open(i[1], 'rb') as f:
                    bot.send_photo(chat_id, f.read())
                msg = bot.send_message(chat_id, '–ß—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤—ã—à–µ, –≤–≤–µ–¥–∏—Ç–µ ' + i[0])
            else:
                bot.send_message(chat_id, i[1])
                msg = bot.send_message(chat_id, '–ß—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–¥–ø–∏—Å—å –≤—ã—à–µ, –≤–≤–µ–¥–∏—Ç–µ ' + i[0])
            ls_of_buttons.append(i[0])
        bot.send_message(chat_id, '–ü—Ä–æ—á—Ç–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–∞–Ω–µ–ª–∏ –≤–Ω–∏–∑—É —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:',
                         reply_markup=edit_baner(ls_of_buttons))
        bot.register_next_step_handler(msg, pre_change_banner_or_text)

    elif text == '–®–∫–æ–ª–∞':
        bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∫–æ–ª—ã , –∏—Ö ID:\n' + data.get_list_of_schoold_for_admin())
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ ID —à–∫–æ–ª—ã –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (3 —Å–∏–º–≤–æ–ª–∞):')
        bot.register_next_step_handler(msg, pre_edit_school)

    elif text == '–ö–ª–∞—Å—Å.':
        bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∫–æ–ª—ã, –ù–∞–∑–≤–∞–Ω–∏–µ, ID –∫–ª–∞—Å—Å–∞:\n' + data.get_list_of_grades_for_admin())
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∞—Å—Å–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (6 —Å–∏–º–≤–æ–ª–æ–≤):')
        bot.register_next_step_handler(msg, edit_grade)

    elif text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–Ω–µ–≤–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∫–æ–ª—ã, –ù–∞–∑–≤–∞–Ω–∏–µ, ID –∫–ª–∞—Å—Å–∞:\n' + data.get_list_of_grades_for_admin())
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–ª–∞—Å—Å–∞ (6 —Å–∏–º–≤–æ–ª–æ–≤):')
        bot.register_next_step_handler(msg, pre_change_tt)

    elif text == '–£—á–µ–Ω–∏–∫–æ–≤':    # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–Ω–∏–∫–æ–≤ –∫–ª–∞—Å—Å–∞
        bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∫–æ–ª—ã, –ù–∞–∑–≤–∞–Ω–∏–µ, ID –∫–ª–∞—Å—Å–∞:\n' + data.get_list_of_grades_for_admin())
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–ª–∞—Å—Å–∞ (6 —Å–∏–º–≤–æ–ª–æ–≤):')
        bot.register_next_step_handler(msg, pre_change_list_of_child)

    elif text == '–ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª–µ–π':
        bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∫–æ–ª—ã , –∏—Ö ID:\n' + data.get_list_of_schoold_for_admin())
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—è (–¥–æ 7-–∏ —Å–∏–º–≤–æ–ª–æ–≤),'
                                        ' –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:')
        bot.register_next_step_handler(msg, change_id_teacher)


if __name__ == '__main__':
    bot.infinity_polling(True)
